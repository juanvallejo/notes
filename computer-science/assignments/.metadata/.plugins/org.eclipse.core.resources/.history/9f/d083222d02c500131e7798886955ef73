import static org.junit.Assert.*;

import org.junit.Test;


public class BstObjTest {
    
    @Test
    public void doesInsertMethodInsertNodes() {
        BstObj bst = new BstObj();
        bst.insert(new Person("John","Smith",25,"VA"));
        bst.insert(new Person("Alex","Johanson",43,"TX"));
        
        assertFalse(bst.isEmpty());
    }
    
    @Test(expected=IllegalArgumentException.class)
    public void doesInsertMethodHandleDuplicates() {
        BstObj bst = new BstObj();
        bst.insert(new Person("John","Smith",25,"VA"));
        bst.insert(new Person("John","Smith",25,"VA"));
    }
    
    @Test
    public void doesFindMethodCorrectlySearchForValue() {
        BstObj bst = new BstObj();
        bst.insert(new Person("John","Smith",25,"VA"));
        bst.insert(new Person("Alex","Johanson",43,"TX"));
        bst.insert(new Person("Mark","James",42,"NV"));
        
        assertTrue(bst.find(new Person("John","Smith",25,"VA")));
    }
    
    @Test
    public void doesDeleteMethodCheckForNodeExistence() {
        BstObj bst = new BstObj();
        bst.insert(new Person("John","Smith",25,"VA"));
        bst.delete((new Person("John","James",25,"VA")));
        
        assertFalse(bst.isEmpty());
    }
    
    @Test
    public void doesDeleteMethodDeleteNode() {
        BstObj bst = new BstObj();
        bst.insert(new Person("John","Smith",25,"VA"));
        bst.delete((new Person("John","Smith",25,"VA")));
        
        assertTrue(bst.isEmpty());
    }
    
    @Test
    public void doesDeleteMethodDeleteNodeWithKids() {
        BstObj bst = new BstObj();
        bst.insert(new Person("John","Smith",25,"VA"));
        bst.insert(new Person("Alex","Johanson",43,"TX"));
        bst.insert(new Person("Mark","James",42,"NV"));
        bst.delete((new Person("John","Smith",25,"VA")));
        
        assertTrue(bst.isEmpty());
    }
    
    @Test
    public void stringcomparetotest() {
        String str1 = "Cody Smares";
        String str2 = "cody Smares";
        
        System.out.println(">"+(str1.compareTo(str2)));
    }

}
